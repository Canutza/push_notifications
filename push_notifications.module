<?php

/**
 * @file
 * Contains push_notifications.module functionality.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Link;

/**
 * OS device types IDs.
 */
const PUSH_NOTIFICATIONS_TYPE_ID_IOS = 'apns';
const PUSH_NOTIFICATIONS_TYPE_ID_ANDROID = 'gcm';

/**
 * Denotes that the push notification is not send, just saved as draft.
 */
const PUSH_NOTIFICATION_DRAFT = 0;

/**
 * Denotes that the push notification is send.
 */
const PUSH_NOTIFICATION_SENT = 1;

/**
 * APNS feedback host.
 */
const PUSH_NOTIFICATIONS_APNS_FEEDBACK_HOST = 'feedback.push.apple.com';

/**
 * APNS feedback port.
 */
const PUSH_NOTIFICATIONS_APNS_FEEDBACK_PORT = 2196;

/**
 * APNS size limit for individual payload, in bytes.
 */
const PUSH_NOTIFICATIONS_APNS_PAYLOAD_SIZE_LIMIT = 2048;

/**
 * Implements hook_help().
 */
function push_notifications_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the push_notifications module.
    case 'help.page.push_notifications':
      $PushHandler = \Drupal::service('push_notifications.message_sender_accounts');
      $PushHandler->setAccounts(array(Drupal::currentUser()));
      $PushHandler->setMessage('This is my test payload.');
      $PushHandler->dispatch();

      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Push notification functionality for iPhone and Android.') . '</p>';
      $output .= '<p>' . t('The full documentation is available online: <a href="@doc_url" target="_blank">Documentation</a >.', array(
        '@doc_url' => 'https://www.drupal.org/node/2718063'
        )) . '</p>';

      $output .= '<p>' . t('You can manually send out a push notification @message_link.', array(
          '@message_link' => Link::createFromRoute('from the admin section', 'push_notifications.send_message_form')->toString(),
        )) . '</p>';
      return $output;
  }
}

/**
 * Get available networks.
 */
function push_notifications_get_networks() {
  return array(
    PUSH_NOTIFICATIONS_TYPE_ID_IOS,
    PUSH_NOTIFICATIONS_TYPE_ID_ANDROID,
  );
}

/**
 * Generate and set the random file ending for APNS certificates.
 */
function push_notifications_set_random_certificate_string() {
  // Generate a random 10-digit string.
  $random_string = substr(md5(microtime()), 0, 10);

  // Write random string to variables.
  $config = \Drupal::service('config.factory')->getEditable('push_notifications.apns');
  $config->set('certificate_random', $random_string);
  $config->save();
}

/**
 * Get name of random certificate.
 *
 * @param string $environment
 *   Environment name.
 *
 * @return string
 *   Certificate filename.
 */
function push_notifications_get_certificate_name($environment = 'development') {
  $filename = array(
    'apns',
    $environment,
    \Drupal::config('push_notifications.apns')->get('certificate_random'),
  );
  return implode('-', $filename) . '.pem';

}